- name: Determine Network Manager dispatcher hooks.
  ansible.builtin.set_fact:
    hook_templates: |-
      {%- set hook_templates = [] -%}
      {%- for interface in eseries_ip_base_interfaces -%}
        {%- for template in interface['hook_templates'] | default(eseries_ip_base_default_hook_templates) -%}
          {%- set filename = template.split(".")[0] ~ "-" ~ interface["name"] -%}
          {%- if hook_templates.append({"filename": filename, "template": template, "interface": interface}) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_templates -}}

# Determine whether Network Manager dispatcher hooks need to be changed.
- name: Get link status for interfaces.
  ansible.builtin.command: "ip -4 address show {{ item['name'] }}"
  changed_when: false
  register: link_info
  loop: "{{ eseries_ip_base_interfaces }}"
  become: true

- name: Determine interfaces that are UP.
  ansible.builtin.set_fact:
    up_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for result in link_info["results"] if "state UP" in result["stdout"] -%}
        {%- if interfaces.append(result["item"]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {{- interfaces -}}

# Determine whether existing Network Manager dispatcher hooks need to be changed.
- name: Check for existing Network Manager dispatcher hooks.
  ansible.builtin.stat:
    path: "{{ eseries_ip_base_network_manager_dispatcher_d }}{{ item['filename'] }}"
  register: hook_templates_stats
  loop: "{{ hook_templates }}"

- name: Determine whether Network Manager dispatcher hooks need to change.
  ansible.builtin.template:
    src: "{{ item['template'] }}"
    dest: "{{ eseries_ip_base_network_manager_dispatcher_d }}{{ item['filename'] }}"
    mode: "0755"
    group: root
    owner: root
  register: hooks
  check_mode: true
  loop: '{{ hook_templates }}'
  become: true

# Determine which actions need to be performed before and after hooks are created/updated.
- name: Determine which actions need to be applied before and after Network Manager dispatcher hook changes.
  ansible.builtin.set_fact:
    hook_state_commands: |-
      {%- set hook_state_commands = {"before_hook_change": [], "after_hook_change": []} -%}

      {#- Determine any interfaces that are UP -#}
      {%- for link_info_result in link_info["results"] if "state UP" in link_info_result["stdout"] -%}
        {%- set interface = link_info_result["item"]["name"] -%}

        {#- Determine which UP interfaces -#}
        {%- for hook_templates_stats_result in hook_templates_stats["results"] if hook_templates_stats_result["item"]["interface"]["name"] == interface -%}
          {%- set template = hook_templates_stats_result["item"]["template"] -%}

          {#- Determine whether the existing dispatch hooks require changes -#}
          {%- for hooks_result in hooks["results"] if hooks_result["changed"] and hooks_result["item"]["template"] == template -%}
            {%- set hook_path = eseries_ip_base_network_manager_dispatcher_d ~ hooks_result["item"]["filename"] -%}

            {#- Add down action command for existing hook on an UP interface -#}
            {%- if hook_templates_stats_result["stat"]["exists"] -%}
              {%- if hook_state_commands["before_hook_change"].append(hook_path ~ " " ~ interface ~ " down") -%}{%- endif -%}
            {%- endif -%}

            {#- Add up action command for hook on an UP interface -#}
          {%- if hook_state_commands["after_hook_change"].append(hook_path ~ " " ~ interface ~ " up") -%}{%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_state_commands -}}

# Apply any required changes.
- name: Send down action to existing Network Manager dispatcher hooks.
  ansible.builtin.command: "{{ item }}"
  loop: '{{ hook_state_commands["before_hook_change"] }}'

- name: Create Network Manager dispatcher hooks.
  ansible.builtin.template:
    src: "{{ item['template'] }}"
    dest: "{{ eseries_ip_base_network_manager_dispatcher_d }}{{ item['filename'] }}"
    mode: "0755"
    group: root
    owner: root
  register: hooks
  loop: "{{ hook_templates }}"
  become: true

- name: Send up action to existing Network Manager dispatcher hooks.
  ansible.builtin.command: "{{ item }}"
  loop: '{{ hook_state_commands["after_hook_change"] }}'
