- name: Ensure the host NVMe Qualified Name (NQN) is correctly set.
  copy:
    content: "{{ eseries_nvme_nqn }}"
    dest: "{{ eseries_nvme_ib_hostnqn }}"
  become: true
  when: eseries_nvme_nqn is defined and eseries_nvme_nqn

- name: Get the host NVMe Qualified Name (NQN).
  ansible.builtin.command:
    cmd: "{{ eseries_nvme_ib_nqn_command }}"
  changed_when: false
  register: hostnqn_output
  become: true

- name: Determine NVMe storage target information.
  set_fact:
    targets: |-
      {%- set targets = {} -%}
      {%- for volume in initiator_volume_facts -%}
        {%- for host_port_information in volume["host_port_information"]["nvme_ib"] -%}
          {%- if host_port_information["link_status"] == "active" and host_port_information["ipv4"] -%}
            {%- for interface_info in eseries_nvme_ib_interfaces -%}
              {%- if host_port_information["ipv4"]["address"] | ansible.netcommon.ipaddr(interface_info["address"]) -%}
                {%- if targets.update({volume["ansible_array_name"] ~ ":" ~ host_port_information["interface_reference"]: {
                        "array_name": volume["ansible_array_name"],
                        "address": host_port_information["ipv4"]["address"],
                        "port": eseries_nvme_ib_port,
                        "queue_depth": interface_info["queue_depth"] | default(eseries_nvme_ib_queue_depth),
                        "controller_loss_timeout": eseries_nvme_ib_controller_loss_timeout,
                        "hostnqn": hostnqn_output["stdout"],
                        "nqn": host_port_information["nqn"] }}) -%}{%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- targets -}}

- name: Ensure there is at least one usable target before continuing.
  fail:
    msg: "Error: Unable to establish communication with the storage system. Check physical connections and interface configuration."
  when: targets.keys() | list | length == 0

- name: Create NVMe service daemon connections file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'eseries_nvme_ib_connections.j2') }}"
    dest: "{{ eseries_nvme_ib_daemon_path }}eseries_nvme_ib_connections.conf"
    mode: "0644"
  register: nvme_connections
  become: true

- name: Create NVMe service daemon.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'nvme_daemon.j2') }}"
    dest: "{{ eseries_nvme_ib_daemon_path }}{{ eseries_nvme_ib_daemon_name }}"
    mode: "0755"
  register: nvme_daemon
  become: true

- name: Create NVMe systemd service file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'nvme_service.j2') }}"
    dest: "{{ eseries_nvme_ib_service_path }}{{ eseries_nvme_ib_service_name }}"
    mode: "0644"
  register: nvme_service
  become: true

- name: Ensure NVMe service is running.
  ansible.builtin.systemd:
    name: "{{ eseries_nvme_ib_service_name }}"
    state: "{% if nvme_connections['changed'] or nvme_daemon['changed'] or nvme_service['changed'] %}reloaded{% else %}started{% endif %}"
    enabled: true
    daemon_reload: true
  register: nvme_service_start
  become: true

- name: Wait for NVMe IB service to complete.
  ansible.builtin.shell: "systemctl --state=active,exited | grep {{ eseries_nvme_ib_service_name }}"
  become: true
  failed_when: false
  changed_when: false
  register: command_result
  retries: 60
  delay: 2
  until: command_result['rc'] == 0
  when: nvme_service_start['changed']
