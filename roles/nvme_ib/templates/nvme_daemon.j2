#!/bin/sh

is_storage_port_connected() {
  storage_nqn=$1
  storage_address=$2

  for controller_path in /sys/class/nvme-fabrics/ctl/nvme*; do
    if grep "$storage_nqn" $controller_path/subsysnqn > /dev/null 2>&1 && grep "$storage_address" $controller_path/address > /dev/null 2>&1; then
      return 0
    fi
  done

  return 1
}

# Trigger udev rules for all devices discovered.
trigger_udev_device_rules() {
  storage_nqn=$1
  storage_address=$2

  for controller_path in /sys/class/nvme-fabrics/ctl/nvme*; do
    if grep "$storage_nqn" $controller_path/subsysnqn > /dev/null 2>&1 && grep "$storage_address" $controller_path/address > /dev/null 2>&1; then
      for path in $controller_path/nvme*c*; do
        if [ -w $path/uevent ]; then echo add > $path/uevent; fi
      done
    fi
  done

  return 1
}

# Connected port to already discover storage.
connect_storage() {
  rc=1
  host_nqn=$1
  storage_name=$2
  storage_nqn=$3
  storage_address=$4
  port=$5
  queue_depth=$6
  controller_loss_timeout=$7

  # Check whether storage has been connected through port.
  if ! (is_storage_port_connected $storage_nqn $storage_address); then
    echo -n "Connecting to $storage_name via $storage_address..."

    # Check that storage is reachable.
    if ! (ping -c 1 $storage_address > /dev/null 2>&1); then
      echo "Failed! $storage_address not reachable."

    # Discover and connect to storage via port address.
    elif nvme discover --transport=rdma --traddr=$storage_address --trsvcid=$port --hostnqn=$host_nqn > /dev/null 2>&1; then
      if nvme connect --transport=rdma --traddr=$storage_address --nqn=$storage_nqn --queue-size=$queue_depth --ctrl-loss-tmo=$controller_loss_timeout > /dev/null 2>&1; then
        sleep 1
        trigger_udev_device_rules $storage_nqn $storage_address
        echo "Connected."
        rc=0
      else
        echo "Failed! Unable to connect to storage port."
      fi

    else
      echo "Failed! Unable to discover storage port."
    fi
  fi

  return $rc
}

# Disconnects storage system from host.
disconnect_storage() {
  storage_name=$1
  storage_nqn=$2

  # Disconnect from storage device
  echo -n "Disconnecting from $storage_name..."
  for ctl in /sys/class/nvme-fabrics/ctl/nvme*; do
    if grep "$storage_nqn" $ctl/subsysnqn > /dev/null 2>&1; then
      nvme disconnect --nqn=$storage_nqn
      return
    fi
  done

  echo "Not connected!"
}

start() {
  host_nqn=$(cat /etc/nvme/hostnqn)

  # Spin every 5 seconds and validate NVMe connections.
  while [ -f /etc/nvme/eseries_nvme_ib_connections.conf ]; do

    # Connect to all known E-Series storage system(s).
    while read -r line; do
      connect_storage $host_nqn $line &
    done < /etc/nvme/eseries_nvme_ib_connections.conf | grep "^ *[^#]"

    # Wait for all tasks to complete.
    wait

    # Check whether all known E-Series storage system(s) are connected.
    storage_connected=0
    while read -r line; do
      array_info=$(echo $line | cut -f 2,3 -d " ");
      if ! is_storage_port_connected $array_info; then
        storage_connected=1
      fi
    done < /etc/nvme/eseries_nvme_ib_connections.conf
    if [ $storage_connected = 0 ]; then
      return
    fi
    sleep 5
  done

  echo "There were no storage targets to connect!"
}

stop() {

  if [ -f /etc/nvme/eseries_nvme_ib_connections.conf ]; then

    # Create a temporary file with only the entries that are required for disconnecting from storage system(s).
    cat /etc/nvme/eseries_nvme_ib_connections.conf | awk '{print $1" "$2}' | uniq > /tmp/~eseries_nvme_ib_disconnections.conf

    # Disconnect from all E-Series storage system(s).
    while read -r line; do
      disconnect_storage $line &
    done < /tmp/~eseries_nvme_ib_disconnections.conf

    # Wait for all tasks to complete.
    rm -f /tmp/~eseries_nvme_ib_disconnections.conf
    wait
  else
    echo "There were no storage targets to disconnect!"
  fi
}

# Note: reload will start any NVMe IB sessions that were not started found in /etc/nvme/eseries_nvme_ib_connections.conf
#   This functionality allows new sessions to be created and started without affecting existing sessions.
case $1 in
  start|reload)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    sleep 5
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|reload}"
    rc=1
esac

exit $rc
