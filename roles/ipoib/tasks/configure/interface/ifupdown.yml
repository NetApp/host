- name: Ensure ifcfg-* files exist for each iSCSI network interface (RHEL, SUSE).
  template:
    backup: true
    src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'ifupdown/ifcfg.j2') }}"
    dest: "{{ eseries_ipoib_ifcfg_path }}ifcfg-{{ item['name'] }}"
  register: ifcfg
  loop: "{{ eseries_ipoib_interfaces }}"
  become: true

- name: Ensure gateway route exists for each InfiniBand iSER network interface (SUSE).
  lineinfile:
    path: "{{ eseries_ipoib_ifcfg_path }}ifroute-{{ item['name'] }}"
    line: "default {{ item['gateway'] }} - {{ item['name'] }}"
    create: true
  loop: "{{ eseries_ipoib_interfaces }}"
  when: "(ansible_os_family | lower) == 'suse' and 'gateway' in (item.keys() | list)"

- name: Get the link status for interface
  command:
    cmd: ip -4 address show {{ item['name'] }}
  changed_when: false
  register: link_info
  loop: "{{ eseries_ipoib_interfaces }}"
  become: true

- name: Determine changed interfaces.
  set_fact:
    changed_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for result in link_info["results"] -%}
        {%- if "state UP" not in result["stdout"] or "inet " ~ result["item"]["address"] not in result["stdout"] or
               ("mtu" in (result["item"].keys() | list) and "mtu " ~ result["item"]["mtu"] not in result["stdout"]) -%}
          {%- if interfaces.append(result["item"]["name"]) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ interfaces | list }}

- name: Flush InfiniBand iSER interface.
  command: ip address flush {{ item }}
  loop: "{{ changed_interfaces }}"
  become: true
  ignore_errors: true

- name: Bring InfiniBand iSER interface down.
  command: ifdown {{ item }}
  loop: "{{ changed_interfaces }}"
  become: true
  ignore_errors: true

- name: Bring InfiniBand iSER interface up.
  command: ifup {{ item }}
  loop: "{{ changed_interfaces }}"
  ignore_errors: true
  become: true

# Note: NVMe-IB does not report 'state UP' until service is in use. So only until the service is active will it report as active.
- name: Wait for interfaces to be up.
  shell: ip -4 address show {{ item }}
  register: link_info
  loop: "{{ changed_interfaces }}"
  retries: 6
  delay: 5
  until: "'state UP' in link_info['stdout']"
  changed_when: false
  failed_when: false
  become: true
