- name: Ensure ifcfg-* files exist for each iSCSI network interface (RHEL, SUSE).
  ansible.builtin.template:
    backup: true
    src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'ifupdown/ifcfg.j2') }}"
    dest: "{{ eseries_ipoib_ifcfg_path }}ifcfg-{{ item['name'] }}"
  register: ifcfg
  loop: "{{ eseries_ipoib_interfaces }}"
  become: true

- name: Create Network Manager dispatcher hooks.
  ansible.builtin.template:
    src: "{{ item['template'] }}"
    dest: "{{ eseries_ipoib_network_manager_dispatcher_d }}{{ item['filename'] }}"
    mode: "0755"
    group: root
    owner: root
  register: hooks
  loop: "{{ hook_templates }}"
  become: true
  vars:
    hook_templates: |-
      {%- set hook_templates = [] -%}
      {%- for interface in eseries_ipoib_interfaces -%}
        {%- for template in interface['hook_templates'] | default(eseries_ipoib_default_hook_templates | default([])) -%}
          {%- set filename = template.split(".")[0] ~ "-" ~ interface["name"] -%}
          {%- if hook_templates.append({"filename": filename, "template": template, "interface": interface}) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_templates -}}

- name: Ensure gateway route exists for each InfiniBand iSER network interface (SUSE).
  lineinfile:
    path: "{{ eseries_ipoib_ifcfg_path }}ifroute-{{ item['name'] }}"
    line: "default {{ item['gateway'] }} - {{ item['name'] }}"
    create: true
  loop: "{{ eseries_ipoib_interfaces }}"
  when: "(ansible_os_family | lower) == 'suse' and 'gateway' in (item.keys() | list)"

- name: Determine changed interfaces.
  ansible.builtin.set_fact:
    changed_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for iface in ifcfg["results"] if iface["changed"] and iface["item"]["name"] not in interfaces -%}
        {%- if interfaces.append(iface["item"]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {%- for hook in hooks["results"] if hook["changed"] and hook["item"]["interface"]["name"] not in interfaces -%}
        {%- if interfaces.append(hook["item"]["interface"]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {{- interfaces -}}

- name: Get the link status for interface
  ansible.builtin.command:
    cmd: ip -4 address show {{ item['name'] }}
  changed_when: false
  register: link_info
  loop: "{{ eseries_ipoib_interfaces }}"
  become: true

- name: Determine down interfaces.
  set_fact:
    down_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for result in link_info["results"] -%}
        {%- if "state UP" not in result["stdout"] -%}
          {%- if interfaces.append(result["item"]["name"]) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ interfaces | list }}

- name: Flush InfiniBand iSER interface.
  ansible.builtin.command: ip address flush {{ item }}
  loop: "{{ changed_interfaces | difference(down_interfaces) }}"
  become: true
  ignore_errors: true

- name: Bring InfiniBand iSER interface down.
  ansible.builtin.command: ifdown {{ item }}
  loop: "{{ changed_interfaces | difference(down_interfaces) }}"
  become: true
  ignore_errors: true

- name: Bring InfiniBand iSER interface up.
  ansible.builtin.command: ifup {{ item }}
  loop: "{{ changed_interfaces + down_interfaces | unique }}"
  ignore_errors: true
  become: true

# Note: NVMe-IB does not report 'state UP' until service is in use. So only until the service is active will it report as active.
- name: Wait for interfaces to be up.
  ansible.builtin.command: ip -4 address show {{ item }}
  register: link_info
  loop: "{{ changed_interfaces | intersect(down_interfaces) }}"
  retries: 6
  delay: 5
  until: "'state UP' in link_info['stdout']"
  changed_when: false
  failed_when: false
  become: true
