- name: Get the host NVMe Qualified Name (NQN).
  command:
    cmd: "{{ eseries_nvme_fc_nqn_command }}"
  changed_when: false
  register: hostnqn_output
  become: true

- name: Get the WWNN and WWPN for the host's traddr.
  shell: "for path in /sys/class/fc_host/*; do echo nn-`cat $path/node_name`:pn-`cat $path/port_name`; done"
  changed_when: false
  register: host_traddr_output
  become: true

- name: Determine NVMe storage target information.
  set_fact:
    targets: |-
      {%- set targets = [] -%}
      {%- set traddr_list = [] -%}
      {%- for volume in initiator_volume_facts -%}
        {%- for host_port_information in volume["host_port_information"]["nvme_fc"] -%}
          {%- set traddr = "nn-0x" ~ host_port_information["wwnn"] | lower ~ ":pn-0x" ~ host_port_information["wwpn"] | lower -%}
          {%- if host_port_information["link_status"] == "up" and traddr not in traddr_list -%}
            {%- if traddr_list.append(traddr) -%}{%- endif -%}
            {%- for host_traddr in host_traddr_output["stdout_lines"] -%}
              {%- if targets.append({"array_name": volume["ansible_array_name"],
                                     "queue_depth": eseries_nvme_fc_queue_depth,
                                     "controller_loss_timeout": eseries_nvme_fc_controller_loss_timeout,
                                     "hostnqn": hostnqn_output["stdout"],
                                     "nqn": host_port_information["nqn"],
                                     "host_traddr": host_traddr,
                                     "traddr": traddr }) -%}{%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ targets }}

- name: Ensure there is at least one usable target before continuing.
  fail:
    msg: "Error: Unable to establish communication with the storage system. Check physical connections and interface configuration."
  when: targets | length == 0

- name: Create NVMe service daemon.
  template:
    src: nvme_fc_daemon.j2
    dest: "{{ eseries_nvme_fc_daemon_path }}{{ eseries_nvme_fc_daemon_name }}"
    mode: "0744"
  register: nvme_daemon
  become: true

- name: Create NVMe systemd service file.
  template:
    src: nvme_fc_service.j2
    dest: "{{ eseries_nvme_fc_service_path }}{{ eseries_nvme_fc_service_name }}"
  register: nvme_service
  become: true

- name: Ensure NVMe service is running.
  systemd:
    name: "{{ eseries_nvme_fc_service_name }}"
    state: started
    enabled: "{{'True' if eseries_nvme_fc_use_nvmefc_boot_connections == False else 'False' }}"
    daemon_reload: true
  become: true
