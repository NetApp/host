- name: Get the host NVMe Qualified Name (NQN).
  ansible.builtin.command: "{{ eseries_nvme_nqn_command }}"
  changed_when: false
  register: hostnqn_output
  become: true

# IMPORTANT: Refresh storage facts must be done in order to get the latest interface link statuses.
- name: Discover mapped-volume information from associated storage systems.
  ansible.builtin.import_role:
    name: netapp_eseries.host.common
    tasks_from: gather_storage_facts.yml

- name: Discover mapped-volume information from associated storage systems.
  ansible.builtin.import_role:
    name: netapp_eseries.host.common
    tasks_from: volume_facts.yml

- name: Configure service for NVMe over InfiniBand and NVMe RoCE
  block:
    - name: Determine NVMe storage target information.
      set_fact:
        eseries_nvme_daemon_name: eseries_{{ eseries_nvme_protocol }}_deamon.sh
        eseries_nvme_service_name: eseries_{{ eseries_nvme_protocol }}.service
        eseries_nvme_connections_file: eseries_{{ eseries_nvme_protocol }}_connections
        targets: |-
          {%- set targets = {} -%}
          {%- for volume in initiator_volume_facts if volume["host_port_information"][eseries_nvme_protocol] is defined -%}
            {%- for host_port_information in volume["host_port_information"][eseries_nvme_protocol] -%}
              {%- if host_port_information["link_status"] in ["up", "active"] and host_port_information["ipv4"] -%}
                {%- for interface_info in eseries_nvme_interfaces -%}
                  {%- if host_port_information["ipv4"]["address"] | ansible.netcommon.ipaddr(interface_info["address"]) -%}
                    {%- if targets.update({volume["ansible_array_name"] ~ ":" ~ host_port_information["interface_reference"]: {
                            "array_name": volume["ansible_array_name"],
                            "address": host_port_information["ipv4"]["address"],
                            "port": interface_info["port"] | default(eseries_nvme_port),
                            "queue_depth": interface_info["queue_depth"] | default(eseries_nvme_queue_depth),
                            "controller_loss_timeout": interface_info["controller_loss_timeout"] | default(eseries_nvme_controller_loss_timeout),
                            "hostnqn": hostnqn_output["stdout"],
                            "nqn": host_port_information["nqn"] }}) -%}{%- endif -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{- targets -}}

    - name: Ensure there is at least one usable target before continuing.
      fail:
        msg: "Error: Unable to establish communication with the storage system. Check physical connections and interface configuration."
      when: targets.keys() | list | length == 0

    - name: Create NVMe service daemon connections file.
      ansible.builtin.template:
        src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'configure/service/nvme_connections.j2') }}"
        dest: "{{ eseries_nvme_daemon_path }}{{ eseries_nvme_connections_file }}"
        mode: "0644"
      register: nvme_connections
      become: true

    - name: Create NVMe service daemon.
      ansible.builtin.template:
        src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'configure/service/nvme_daemon.j2') }}"
        dest: "{{ eseries_nvme_daemon_path }}{{ eseries_nvme_daemon_name }}"
        mode: "0755"
      register: nvme_daemon
      become: true

    - name: Create NVMe systemd service file.
      ansible.builtin.template:
        src: "{{ lookup('netapp_eseries.host.eseries_template_path', 'configure/service/nvme_service.j2') }}"
        dest: "{{ eseries_nvme_service_path }}{{ eseries_nvme_service_name }}"
        mode: "0644"
      register: nvme_service
      become: true

    - name: Ensure NVMe service is running.
      ansible.builtin.systemd:
        name: "{{ eseries_nvme_service_name }}"
        state: "{% if nvme_connections['changed'] or nvme_daemon['changed'] or nvme_service['changed'] %}reloaded{% else %}started{% endif %}"
        enabled: true
        daemon_reload: true
      register: nvme_service_start
      become: true

    - name: Wait for NVMe service to complete.
      ansible.builtin.shell: "systemctl --state=exited | grep {{ eseries_nvme_service_name }}"
      become: true
      failed_when: false
      changed_when: false
      register: command_result
      retries: 60
      delay: 2
      until: command_result['rc'] == 0
      when: nvme_service_start['changed']
  when: eseries_nvme_protocol in ['nvme_ib', 'nvme_roce']

# TODO: This should enable NVMe systemd service for discover/connect to targets via udev triggers.
# - name: Configure service for NVMe over Fibre Channel
#   block:
#   when: eseries_nvme_protocol in ['nvme_fc']
