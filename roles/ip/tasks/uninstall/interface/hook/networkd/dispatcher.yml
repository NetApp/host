- name: Determine expected dispatcher hooks.
  ansible.builtin.set_fact:
    hook_templates: |-
      {%- set hook_templates = [] -%}
      {%- for interface in eseries_ip_interfaces -%}
        {%- for template in interface['hook_templates'] | default(eseries_ip_default_hook_templates) -%}
          {%- set filename = template.split(".")[0] ~ "-" ~ interface["name"] -%}
          {%- if hook_templates.append({"filename": filename, "template": template, "interface": interface}) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_templates -}}

# Determine interface's up status.
- name: Get link status for interfaces.
  ansible.builtin.command: "ip -4 address show {{ item['name'] }}"
  changed_when: false
  register: link_info
  loop: "{{ eseries_ip_interfaces }}"
  become: true

- name: Determine interfaces that are UP.
  ansible.builtin.set_fact:
    up_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for result in link_info["results"] if "state UP" in result["stdout"] -%}
        {%- if interfaces.append(result["item"]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {{- interfaces -}}

# Determine whether existing networkd dispatcher hooks need to be changed.
- name: Check for existing dispatcher hooks.
  ansible.builtin.stat:
    path: "{{ eseries_ip_networkd_dispatcher }}routable.d/{{ item['filename'] }}"
  register: hooks_stats
  loop: "{{ hook_templates }}"
  become: true

- name: Bring down any hooks.
  ansible.builtin.shell: "{{ item }}"  # Shell is required since environment variables are required
  loop: "{{ hook_off_cmds }}"
  become: true
  vars:
    hook_off_cmds: |-
      {%- set hook_off_cmds = [] -%}
      {%- for template in hook_templates -%}
        {%- set interface = template["interface"]["name"] -%}

        {%- for hooks_stats_result in hooks_stats["results"]
              if hooks_stats_result["item"]["interface"]["name"] == interface and
                 hooks_stats_result["stat"]["exists"] and interface in up_interfaces -%}
          {%- set hook_path = eseries_ip_networkd_dispatcher ~ "routable.d/" ~ hooks_stats_result["item"]["filename"] -%}
          {%- if hook_off_cmds.append("IFACE=" ~ interface ~ " STATE=off " ~ hook_path) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_off_cmds -}}

- name: Delete all dispatcher hooks.
  ansible.builtin.file:
    state: absent
    path: "{{ eseries_ip_networkd_dispatcher }}/routable.d/{{ item['filename'] }}"
  loop: "{{ hook_templates }}"
  become: true

- name: Determine networkd dispatcher action directories.
  ansible.builtin.command: "find {{ eseries_ip_networkd_dispatcher }} -maxdepth 1 -type d"
  changed_when: false
  register: dispatcher_action_dirs

- name: Delete all symbolic links to networkd dispatcher hooks.
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop: "{{ link_paths }}"
  become: true
  vars:
    link_paths: |-
      {%- set action_dirs = [] -%}
      {%- for line in dispatcher_action_dirs["stdout_lines"] -%}
        {%- set action_dir = line | regex_replace("^.*\/([\w-]+)\.d$", "\\1") -%}
        {%- if action_dir != eseries_ip_networkd_dispatcher -%}
          {%- if action_dirs.append(action_dir) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}

      {%- set link_paths = [] -%}
      {%- for hook_template in hook_templates -%}
        {%- for action in ["off", "carrier", "degraded", "dormant", "no-carrier"] if action in action_dirs -%}
          {%- set path = eseries_ip_networkd_dispatcher ~ action ~ ".d/" ~ hook_template["filename"] -%}
          {%- if link_paths.append(path) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- link_paths -}}
