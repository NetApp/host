- name: Determine expected dispatcher hooks.
  ansible.builtin.set_fact:
    hook_templates: |-
      {%- set hook_templates = [] -%}
      {%- for interface in eseries_ip_interfaces -%}
        {%- for template in interface['hook_templates'] | default(eseries_ip_default_hook_templates) -%}
          {%- set filename = template.split(".")[0] ~ "-" ~ interface["name"] -%}
          {%- if hook_templates.append({"filename": filename, "template": template, "interface": interface}) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_templates -}}

# Determine interface's up status.
- name: Get link status for interfaces.
  ansible.builtin.command: "ip -4 address show {{ item['name'] }}"
  changed_when: false
  register: link_info
  loop: "{{ eseries_ip_interfaces }}"
  become: true

- name: Determine interfaces that are UP.
  ansible.builtin.set_fact:
    up_interfaces: |-
      {%- set interfaces = [] -%}
      {%- for result in link_info["results"] if "state UP" in result["stdout"] -%}
        {%- if interfaces.append(result["item"]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {{- interfaces -}}

# Determine whether existing Network Manager dispatcher hooks need to be changed.
- name: Check for existing dispatcher hooks.
  ansible.builtin.stat:
    path: "{{ eseries_ip_network_manager_dispatcher_d }}{{ item['filename'] }}"
  register: hooks_stats
  loop: "{{ hook_templates }}"
  become: true

- name: Determine whether dispatcher hooks need to changed.
  ansible.builtin.template:
    src: "{{ item['template'] }}"
    dest: "{{ eseries_ip_network_manager_dispatcher_d }}{{ item['filename'] }}"
    mode: "0755"
    group: root
    owner: root
  register: hooks
  check_mode: true
  loop: "{{ hook_templates }}"
  become: true

- name: Bring down any changed hooks.
  ansible.builtin.command: "{{ item }}"
  loop: "{{ hook_down_cmds }}"
  become: true
  vars:
    hook_down_cmds: |-
      {%- set hook_down_cmds = [] -%}
      {%- for hooks_result in hooks["results"] if hooks_result["changed"] -%}
        {%- set interface = hooks_result["item"]["interface"]["name"] -%}

        {%- for hooks_stats_result in hooks_stats["results"]
              if hooks_stats_result["item"]["interface"]["name"] == interface and
                 hooks_stats_result["stat"]["exists"] and interface in up_interfaces -%}
          {%- set hook_path = eseries_ip_network_manager_dispatcher_d ~ hooks_result["item"]["filename"] -%}
          {%- if hook_down_cmds.append(hook_path ~ " " ~ interface ~ " down") -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_down_cmds -}}

- name: Create expected dispatcher hooks.
  ansible.builtin.template:
    src: "{{ item['template'] }}"
    dest: "{{ eseries_ip_network_manager_dispatcher_d }}{{ item['filename'] }}"
    mode: "0755"
    group: root
    owner: root
  register: hooks
  loop: "{{ hook_templates }}"
  become: true

- name: Bring up any changed hooks when the interface configuration is unchanged.
  ansible.builtin.command: "{{ item }}"
  loop: "{{ hook_up_cmds }}"
  become: true
  vars:
    hook_up_cmds: |-
      {%- set changed_interfaces = [] -%}
      {%- for result in interface_config_results if result["changed"] -%}
        {%- if changed_interfaces.append(result["item"]["name"]) -%}{%- endif -%}
      {%- endfor -%}

      {%- set hook_up_cmds = [] -%}
      {%- for hooks_result in hooks["results"] if hooks_result["changed"] -%}
        {%- set interface = hooks_result["item"]["interface"]["name"] -%}

        {%- for hooks_stats_result in hooks_stats["results"]
              if hooks_stats_result["item"]["interface"]["name"] == interface and interface not in changed_interfaces and
                 hooks_stats_result["stat"]["exists"] and interface in up_interfaces -%}
          {%- set hook_path = eseries_ip_network_manager_dispatcher_d ~ hooks_result["item"]["filename"] -%}
          {%- if hook_up_cmds.append(hook_path ~ " " ~ interface ~ " up") -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- hook_up_cmds -}}
