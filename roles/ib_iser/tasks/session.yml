- name: Determine InfiniBand iSER iSCSI targets
  set_fact:
    targets: |-
      {%- set targets = {} -%}
      {%- for volume in initiator_volume_facts -%}
        {%- for host_port_information in volume["host_port_information"]["ib_iser"] -%}
          {%- if host_port_information["link_status"] == "active" -%}
            {%- for interface_info in ib_iser_interfaces_info -%}
              {%- if host_port_information["ipv4"]["address"] | ipaddr(interface_info["address"]) -%}
                {%- if targets.update({host_port_information["interface_reference"]: {
                        "address": host_port_information["ipv4"]["address"],
                        "port": eseries_ib_iser_port,
                        "iqn": host_port_information["iqn"],
                        "username": interface_info["username"],
                        "password": interface_info["password"],
                        "target_portal": interface_info["target_portal"],
                        "name": interface_info["name"],
                        "interface": interface_info["interface"],
                        "nr_sessions": interface_info["nr_sessions"],
                        "mtu": interface_info["mtu"],
                        "queue_depth": interface_info["queue_depth"],
                        "session_replacement_timeout": interface_info["session_replacement_timeout"]}}) -%}{%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ targets }}

- name: Determine whether
  fail:
    msg: "Error: Unable to establish communication with the storage system. Check physical connections and interface configuration."
  when: targets.keys() | list | length == 0

- name: Ensure InfiniBand iSER iSCSI target nodes has been created
  command:
    cmd: "iscsiadm -m node -T {{ item['value']['iqn'] }} -p {{ item['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['value']['target_portal'] }} -I {{ item['value']['name'] }} -o new"
    creates: "{{ eseries_iscsi_node_path }}{{ item['value']['iqn'] }}/{{ item['value']['address'] }},{{ eseries_ib_iser_port }},{{ item['value']['target_portal'] }}"
  register: new_target_node
  loop: "{{ targets | dict2items }}"
  become: true

- name: Get current InfiniBand iSER iSCSI node values.
  command:
    cmd: "iscsiadm -m node -T {{ item['value']['iqn'] }} -p {{ item['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['value']['target_portal'] }}"
  register: target_node_values
  changed_when: false
  loop: "{{ targets | dict2items }}"
  become: true

- name: Set node.startup to automatic
  command:
    cmd: "iscsiadm -m node -T {{ item['item']['value']['iqn'] }} -p {{ item['item']['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['item']['value']['target_portal'] }} -o update -n node.startup -v automatic"
  register: node_startup
  loop: "{{ target_node_values['results'] }}"
  become: true
  when: startup != "automatic"
  vars:
    startup: |-
      {%- for line in item['stdout_lines'] -%}
        {%- if line | regex_search("node\.startup = .*") -%}
          {{- line | regex_search("node\.startup = .*") | regex_replace("node\.startup = ", "") -}}
        {%- endif -%}
      {%- endfor -%}

- name: Update node.session.nr_sessions value.
  command:
    cmd: "iscsiadm -m node -T {{ item['item']['value']['iqn'] }} -p {{ item['item']['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['item']['value']['target_portal'] }} -o update -n node.session.nr_sessions -v {{ item['item']['value']['nr_sessions'] }}"
  register: node_nr_sessions
  loop: "{{ target_node_values['results'] }}"
  become: true
  when: item['item']['value']['nr_sessions'] != nr_sessions | int
  vars:
    nr_sessions: |-
      {%- for line in item['stdout_lines'] -%}
        {%- if line | regex_search("node\.session\.nr_sessions = .*") -%}
          {{- line | regex_search("node\.session\.nr_sessions = .*") | regex_replace("node\.session\.nr_sessions = ", "") -}}
        {%- endif -%}
      {%- endfor -%}

- name: Update node.session.timeo.replacement_timeout value.
  command:
    cmd: "iscsiadm -m node -T {{ item['item']['value']['iqn'] }} -p {{ item['item']['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['item']['value']['target_portal'] }} -o update -n node.session.timeo.replacement_timeout -v {{ item['item']['value']['session_replacement_timeout'] }}"
  register: node_session_replacement_timeout
  loop: "{{ target_node_values['results'] }}"
  become: true
  when: item['item']['value']['session_replacement_timeout'] != session_replacement_timeout | int
  vars:
    session_replacement_timeout: |-
      {%- for line in item['stdout_lines'] -%}
        {%- if line | regex_search("node\.session\.timeo\.replacement_timeout = .*") -%}
          {{- line | regex_search("node\.session\.timeo\.replacement_timeout = .*") | regex_replace("node\.session\.timeo\.replacement_timeout = ", "") -}}
        {%- endif -%}
      {%- endfor -%}

- name: Update node.session.queue_depth value.
  command:
    cmd: "iscsiadm -m node -T {{ item['item']['value']['iqn'] }} -p {{ item['item']['value']['address'] }}:{{ eseries_ib_iser_port }},{{ item['item']['value']['target_portal'] }} -o update -n node.session.queue_depth -v {{ item['item']['value']['queue_depth'] }}"
  register: node_queue_depth
  loop: "{{ target_node_values['results'] }}"
  become: true
  when: item['item']['value']['queue_depth'] != queue_depth | int
  vars:
    queue_depth: |-
      {%- for line in item['stdout_lines'] -%}
        {%- if line | regex_search("node\.session\.queue_depth = .*") -%}
          {{- line | regex_search("node\.session\.queue_depth = .*") | regex_replace("node\.session\.queue_depth = ", "") -}}
        {%- endif -%}
      {%- endfor -%}

- name: Ensure iscsid is running.
  systemd:
    name: iscsid.service
    state: "{%- if new_target_node['changed'] or node_startup['changed'] or node_nr_sessions['changed'] or node_session_replacement_timeout['changed'] or node_queue_depth['changed'] -%}restarted{%- else -%}started{%- endif %}"
    daemon-reload: true
    enabled: true
  register: iscsid_service
  become: true

- name: Ensure iSCSI services are started.
  systemd:
    name: "{{ eseries_iscsi_initiator_service }}"
    state: "{%- if iscsid_conf['changed'] or initiatorname_iscsi['changed'] %}restarted{%- else %}started{%- endif %}"    # iscsisd_conf and initiatorname_iscsi are in configure/x.yml files
    daemon-reload: "{%- if iscsid_conf['changed'] or initiatorname_iscsi['changed'] %}true{%- else %}false{%- endif %}"
    enabled: true
  become: true

- name: Ensure iscsid is running.
  systemd:
    name: iscsid.service
    state: "{%- if new_target_node['changed'] or node_startup['changed'] or node_nr_sessions['changed'] or node_session_replacement_timeout['changed'] or node_queue_depth['changed'] %}restarted{%- else %}started{%- endif %}"
    daemon-reload: true
    enabled: true
  register: iscsid_service
  become: true

- name: Determine the status of iscsid.service and wait for it to be stated.
  command:
    cmd: systemctl status iscsid.service
  register: iscsid_status
  become: true
  retries: 30
  delay: 2
  until: iscsid_status['stdout'] | regex_search('Started Open-iSCSI|iSCSI daemon with pid=[0-9]* started!', multiline=True, ignorecase=True)
  changed_when: false
  when: iscsid_service['changed']

- name: Get the current session list.
  command:
    cmd: "iscsiadm -m session"
  register: target_sessions
  changed_when: false
  failed_when: false
  become: true

- name: Determine whether all expected sessions are connected.
  set_fact:
    login_session_commands: |-
      {%- set login = [] -%}
      {%- set session_stdout = target_sessions['stdout'] | default("") -%}
      {%- for target in targets -%}
        {%- set session_regex = targets[target]["address"] ~ ":" ~ targets[target]["port"] ~ ",.* " ~ targets[target]["iqn"] -%}
        {%- set current_session_count = session_stdout | regex_findall(session_regex) | length -%}
        {%- if current_session_count |int < targets[target]["nr_sessions"] | int -%}
          {%- if login.append("iscsiadm -m node -T " ~ targets[target]["iqn"] ~ " -p " ~ targets[target]["address"] ~ ":" ~ targets[target]["port"] ~ "," ~ targets[target]["target_portal"] ~ " --login") -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ login }}

- name: Login of sessions.
  command:
    cmd: "{{ item }}"
  register: target_login
  become: true
  failed_when: target_login['rc'] not in [0, 15]
  loop: "{{ login_session_commands }}"
