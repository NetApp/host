- name: Check whether SELinux is installed.
  ansible.builtin.shell: getenforce
  register: selinux_getenforce
  changed_when: false
  failed_when: selinux_getenforce["rc"] not in [0, 127]

- name: Prompt user for SELinux security state.
  block:
    - name: Ensure eseries_selinux_state has been set before continuing.
      ansible.builtin.pause:
        prompt: |-
            {% set selinux_mode = hostvars[item]["selinux_getenforce"]["stdout"] | lower %}
            {% set enforcing_reboot_required = selinux_mode == "disabled" %}
            {% set permissive_reboot_required = selinux_mode == "disabled" %}
            {% set disabled_reboot_required = selinux_mode in ["enforcing", "permissive"] %}

            The variable eseries_selinux_state has not been defined for {{ item }} and can be added to its inventory to
            avoid this message in the future. {{ eseries_selinux_prompt_reason }}
            Options are as follows:
                enforcing {%- if selinux_mode == "enforcing" %} (current){% endif %} - SELinux security policy is enforced. {%- if enforcing_reboot_required %} (Reboot required){% endif %}

                permissive {%- if selinux_mode == "permissive" %} (current){% endif %} - SELinux prints warnings instead of enforcing. {%- if permissive_reboot_required %} (Reboot required){% endif %}

                disabled {%- if selinux_mode == "disabled" %} (current){% endif %} - No SELinux policy is loaded. {%- if disabled_reboot_required %} (Reboot required){% endif %}

            What security would you like [enforcing, permissive, disabled, ctrl-c to stop automation]?
      loop: "{{ ansible_play_hosts }}"
      register: selinux_prompt
      delay: 0
      retries: 10
      until: selinux_prompt['user_input'] | lower in ["enforcing", "permissive", "disabled"]
      when: hostvars[item]["selinux_getenforce"] is defined
            and (hostvars[item]["eseries_selinux_state"] is not defined
                 or hostvars[item]["eseries_selinux_state"] not in ["enforcing", "permissive", "disabled"])

    - name: Set variables based on user responses.
      ansible.builtin.set_fact:
        eseries_selinux_state: |-
          {%- for selinux_prompt_host in ansible_play_hosts_all if hostvars[selinux_prompt_host]["selinux_prompt"]["results"] is defined -%}
            {%- for result in hostvars[selinux_prompt_host]["selinux_prompt"]["results"] if inventory_hostname == result["item"] -%}
              {%- if result["user_input"] is defined -%}
                {{- result["user_input"] | lower -}}
              {%- else -%}
                {{- hostvars[inventory_hostname]["eseries_selinux_state"] | lower -}}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
  when: selinux_getenforce["rc"] == 0
  become: true